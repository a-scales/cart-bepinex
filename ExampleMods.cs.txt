/*
 * THIS FILE IS A TEMPLATE FOR REFERENCE ONLY
 * 
 * This contains example patches that won't be compiled. Harmony patches require actual game types.
 * When you've identified the real game classes, create a new .cs file based on these examples.
 */

using HarmonyLib;
using System;
using UnityEngine;
using System.Collections.Generic;
using System.Reflection;

namespace BecomeCart.Examples
{
    /// <summary>
    /// Examples of how to create Harmony patches once you've identified the actual game classes
    /// </summary>
    
    /*
    // Example 1: Make the player move faster
    [HarmonyPatch(typeof(PlayerController), "UpdateMovement")]
    public class PlayerSpeedPatch
    {
        [HarmonyPrefix]
        public static void MakePlayerFaster(ref float ___moveSpeed) // Use ___ for private fields
        {
            // Double the move speed
            ___moveSpeed *= 2.0f;
            
            Plugin.Logger.LogInfo($"Modified player speed to {___moveSpeed}");
            
            // Let the original method run with our modified values
            return;
        }
    }

    // Example 2: Give the player unlimited ammo
    [HarmonyPatch(typeof(WeaponSystem), "ConsumeAmmo")]
    public class UnlimitedAmmoPatch
    {
        [HarmonyPrefix]
        public static bool PreventAmmoConsumption()
        {
            // Skip the original method completely
            // This prevents ammo from being consumed
            return false;
        }
    }

    // Example 3: Modify UI elements
    [HarmonyPatch(typeof(HealthDisplay), "UpdateHealthUI")]
    public class UIModificationPatch
    {
        [HarmonyPostfix]
        public static void ModifyHealthDisplay(MonoBehaviour __instance)
        {
            // Access UI elements after they've been updated
            // Example code (adjust based on actual game types):
            // __instance.healthText.color = Color.red;
        }
    }

    // Example 4: Add new items to inventory
    [HarmonyPatch(typeof(InventoryManager), "Start")]
    public class InventoryPatch
    {
        [HarmonyPostfix]
        public static void AddStartingItems(MonoBehaviour __instance)
        {
            try
            {
                // Example code (adjust based on actual game types):
                // __instance.AddItem("item_id_1", 10);
                
                Plugin.Logger.LogInfo("Added starting items to inventory");
            }
            catch (Exception e)
            {
                Plugin.Logger.LogError($"Error adding starting items: {e.Message}");
            }
        }
    }

    // Example 5: Make enemies weaker
    [HarmonyPatch(typeof(EnemyHealth), "TakeDamage")]
    public class EnemyWeaknessPatch
    {
        [HarmonyPrefix]
        public static void IncreaseDamageTaken(ref float damage)
        {
            // Increase all damage by 50%
            damage *= 1.5f;
        }
    }
    */
} 